// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	entity "weather/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// GetForecast provides a mock function with given fields: city
func (_m *IRepository) GetForecast(city string) (entity.Weather, error) {
	ret := _m.Called(city)

	if len(ret) == 0 {
		panic("no return value specified for GetForecast")
	}

	var r0 entity.Weather
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.Weather, error)); ok {
		return rf(city)
	}
	if rf, ok := ret.Get(0).(func(string) entity.Weather); ok {
		r0 = rf(city)
	} else {
		r0 = ret.Get(0).(entity.Weather)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeather provides a mock function with given fields: cityId
func (_m *IRepository) GetWeather(cityId int) (entity.Weather, error) {
	ret := _m.Called(cityId)

	if len(ret) == 0 {
		panic("no return value specified for GetWeather")
	}

	var r0 entity.Weather
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (entity.Weather, error)); ok {
		return rf(cityId)
	}
	if rf, ok := ret.Get(0).(func(int) entity.Weather); ok {
		r0 = rf(cityId)
	} else {
		r0 = ret.Get(0).(entity.Weather)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(cityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeatherList provides a mock function with given fields: citiesId
func (_m *IRepository) GetWeatherList(citiesId []int) (entity.Weather, error) {
	ret := _m.Called(citiesId)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherList")
	}

	var r0 entity.Weather
	var r1 error
	if rf, ok := ret.Get(0).(func([]int) (entity.Weather, error)); ok {
		return rf(citiesId)
	}
	if rf, ok := ret.Get(0).(func([]int) entity.Weather); ok {
		r0 = rf(citiesId)
	} else {
		r0 = ret.Get(0).(entity.Weather)
	}

	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(citiesId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
