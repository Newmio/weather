// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	entity "weather/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// ICache is an autogenerated mock type for the ICache type
type ICache struct {
	mock.Mock
}

// GetForecast provides a mock function with given fields: city
func (_m *ICache) GetForecast(city string) entity.Weather {
	ret := _m.Called(city)

	if len(ret) == 0 {
		panic("no return value specified for GetForecast")
	}

	var r0 entity.Weather
	if rf, ok := ret.Get(0).(func(string) entity.Weather); ok {
		r0 = rf(city)
	} else {
		r0 = ret.Get(0).(entity.Weather)
	}

	return r0
}

// GetWeather provides a mock function with given fields: cityId
func (_m *ICache) GetWeather(cityId int) entity.Weather {
	ret := _m.Called(cityId)

	if len(ret) == 0 {
		panic("no return value specified for GetWeather")
	}

	var r0 entity.Weather
	if rf, ok := ret.Get(0).(func(int) entity.Weather); ok {
		r0 = rf(cityId)
	} else {
		r0 = ret.Get(0).(entity.Weather)
	}

	return r0
}

// SetForecast provides a mock function with given fields: city, average
func (_m *ICache) SetForecast(city string, average entity.Weather) {
	_m.Called(city, average)
}

// SetWeather provides a mock function with given fields: cityId, weather
func (_m *ICache) SetWeather(cityId int, weather entity.Weather) {
	_m.Called(cityId, weather)
}

// NewICache creates a new instance of ICache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICache(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICache {
	mock := &ICache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
